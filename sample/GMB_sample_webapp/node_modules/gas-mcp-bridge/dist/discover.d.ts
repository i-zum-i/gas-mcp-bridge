/**
 * Reads the script ID from the .clasp.json file in the specified directory.
 * @param projectRoot The root directory of the clasp project. Defaults to cwd.
 * @returns The script ID.
 * @throws An error if the file is not found or is malformed.
 */
export declare const getScriptId: (projectRoot?: string) => Promise<string>;
export interface WebAppDeployment {
    deploymentId: string;
    url: string;
}
/**
 * Finds the latest web app deployment for a given script ID.
 * @param scriptId The script ID.
 * @param accessToken The OAuth access token.
 * @returns The deployment ID and URL, or null if not found.
 */
export declare const getWebAppDeployment: (scriptId: string, accessToken: string) => Promise<WebAppDeployment | null>;
/**
 * Runs 'npx clasp deploy' to create a new deployment.
 */
export declare const runClaspDeploy: () => Promise<void>;
export type AuthConfig = {
    /** Preferred: token placed in GAS Script Properties (long-lived, user-managed). */
    type: 'scriptPropertiesToken';
    /** The Script Property key to read on GAS side (e.g., 'MCP_API_TOKEN'). */
    tokenPropertyKey: string;
} | {
    /** Dev-only fallback: use current local OAuth access token (short-lived). */
    type: 'oauthAccessToken';
};
export interface McpConfig {
    scriptId: string;
    deploymentId: string;
    /** Preferred naming used by server/tooling */
    webAppUrl: string;
    /** Backward compatibility for older code paths */
    gasUrl?: string;
    /** Auth config preferred by server */
    auth: AuthConfig;
    /**
     * Optional: include current local OAuth access token (dev only).
     * This is short-lived and SHOULD NOT be committed.
     */
    devOauthToken?: string;
}
/**
 * Saves (or merges) the discovered configuration to .mcp-gas.json.
 * - Writes both `webAppUrl` and legacy `gasUrl` for compatibility.
 * - Prefers scriptPropertiesToken; can include dev oauth token if MCP_INCLUDE_OAUTH_TOKEN=1.
 */
export declare const saveMcpConfig: (config: Omit<McpConfig, "gasUrl" | "devOauthToken"> & Partial<Pick<McpConfig, "devOauthToken">>, filePath?: string) => Promise<void>;
/**
 * Reads the clasp credentials from the ~/.clasprc.json file.
 * @returns The access token.
 * @throws An error if the file is not found or is malformed.
 */
export declare const getClaspCredentials: () => Promise<{
    accessToken: string;
}>;
/**
 * Compose and persist .mcp-gas.json in one go.
 * Preferred auth is Script Properties token. If MCP_INCLUDE_OAUTH_TOKEN=1, dev token is embedded.
 */
export declare const composeAndSaveMcpConfig: (opts: {
    scriptId: string;
    deployment: WebAppDeployment;
    accessToken: string;
    filePath?: string;
    tokenPropertyKey?: string;
}) => Promise<void>;
